package org.eol.globi.server.util;

import com.fasterxml.jackson.databind.JsonNode;
import org.apache.commons.lang3.RegExUtils;
import org.apache.commons.lang3.StringUtils;
import org.joda.time.DateTime;
import org.joda.time.format.DateTimeFormat;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class ResultFormatterDOT implements ResultFormatter {
    protected static String getSafeLabel(String string) {
        return RegExUtils.replaceAll(string, "\\W", "_");
    }

    /*
        https://en.wikipedia.org/wiki/DOT_language

        digraph graphName {
            a -> b -> c;
            b -> d;
        }
         */

    @Override
    public String format(final String content) throws ResultFormattingException {
        StringBuilder builder = dotPrefix();
        JsonNode results;
        try {
            results = RequestHelper.parse(content);
        } catch (IOException e) {
            throw new ResultFormattingException("failed to parse", e);
        }
        JsonNode columns = results.at("/columns");
        if (columns.isMissingNode()) {
            throw new ResultFormattingException("no column definitions found: failed to parse [" + content + "]");
        }
        Map<String, Integer> nameIndex = new HashMap<String, Integer>();
        for (int i = 0; i < columns.size(); i++) {
            nameIndex.put(columns.get(i).asText(), i);
        }

        List<ResultField> sourceTaxonResultFields = Arrays.asList(ResultField.SOURCE_TAXON_NAME, ResultField.SOURCE_TAXON_PATH, ResultField.SOURCE_TAXON_EXTERNAL_ID, ResultField.SOURCE_TAXON_PATH_IDS);
        List<ResultField> targetTaxonResultFields = Arrays.asList(ResultField.TARGET_TAXON_NAME, ResultField.TARGET_TAXON_PATH, ResultField.TARGET_TAXON_EXTERNAL_ID, ResultField.TARGET_TAXON_PATH_IDS);
        JsonNode rows = results.get("data");
        for (JsonNode row : rows) {
            Integer sourceTaxonIndex = getTaxonLabel(nameIndex, sourceTaxonResultFields);
            Integer targetTaxonIndex = getTaxonLabel(nameIndex, targetTaxonResultFields);

            Integer interactionTypeIndex = nameIndex.get(ResultField.INTERACTION_TYPE.getLabel());
            if (null != sourceTaxonIndex && null != targetTaxonIndex && null != interactionTypeIndex) {
                JsonNode sourceTaxon = row.get(sourceTaxonIndex);
                JsonNode targetTaxon = row.get(targetTaxonIndex);
                JsonNode type = row.get(interactionTypeIndex);
                if (sourceTaxon != null && targetTaxon != null && type != null) {
                    String sourceId = getSafeLabel(sourceTaxon.asText());
                    if (StringUtils.isNoneBlank(sourceId)) {
                        if (targetTaxon.isArray()) {
                            for (JsonNode targetTaxonItem : targetTaxon) {
                                appendEdge(builder, targetTaxonItem, type, sourceId);
                            }
                        } else {
                            appendEdge(builder, targetTaxon, type, sourceId);
                        }
                    }
                }
            }
        }
        dotSuffix(builder);
        return builder.toString();
    }

    protected Integer getTaxonLabel(Map<String, Integer> nameIndex, List<ResultField> sourceTaxonResultFields) {
        Integer sourceTaxonIndex = null;
        Iterator<ResultField> sourceResultFields = sourceTaxonResultFields.iterator();
        while(sourceTaxonIndex == null && sourceResultFields.hasNext()) {
            sourceTaxonIndex = nameIndex.get(sourceResultFields.next().getLabel());
        }
        return sourceTaxonIndex;
    }

    private void appendEdge(StringBuilder builder, JsonNode targetTaxon, JsonNode type, String sourceId) {
        String targetId = getSafeLabel(targetTaxon.asText());
        appendEdge(builder, type, sourceId, targetId);
    }

    private void appendEdge(StringBuilder builder, JsonNode type, String sourceId, String targetId) {
        builder.append(sourceId);
        builder.append("->");
        builder.append(targetId);
        builder.append("[label=\"");
        builder.append(type.asText());
        builder.append("\"];\n");
    }

    private void dotSuffix(StringBuilder builder) {
        builder.append(" }");
    }

    private StringBuilder dotPrefix() {
        StringBuilder builder = new StringBuilder();
        builder.append("// generated by GloBI (see http://globalbioticinteractions.org) on ");
        builder.append(DateTimeFormat.fullDateTime().withZoneUTC().print(new DateTime()));
        builder.append("\n");
        builder.append("digraph GloBI {\n");
        return builder;
    }
}
